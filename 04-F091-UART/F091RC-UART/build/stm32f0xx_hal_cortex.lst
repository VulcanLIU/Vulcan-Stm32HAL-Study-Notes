ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_cortex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NVIC_EnableIRQ:
  24              	.LFB25:
  25              		.file 1 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 2


  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 3


  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 4


 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 5


 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 6


 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 7


 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 8


 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 9


 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 10


 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 11


 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 12


 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
  26              		.loc 1 630 1
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 0200     		movs	r2, r0
  42 0008 FB1D     		adds	r3, r7, #7
  43 000a 1A70     		strb	r2, [r3]
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  44              		.loc 1 631 65
  45 000c FB1D     		adds	r3, r7, #7
  46 000e 1B78     		ldrb	r3, [r3]
  47 0010 1A00     		movs	r2, r3
  48 0012 1F23     		movs	r3, #31
  49 0014 1A40     		ands	r2, r3
  50              		.loc 1 631 7
  51 0016 044B     		ldr	r3, .L2
  52              		.loc 1 631 20
  53 0018 0121     		movs	r1, #1
  54 001a 9140     		lsls	r1, r1, r2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 13


  55 001c 0A00     		movs	r2, r1
  56              		.loc 1 631 18
  57 001e 1A60     		str	r2, [r3]
 632:Drivers/CMSIS/Include/core_cm0.h **** }
  58              		.loc 1 632 1
  59 0020 C046     		nop
  60 0022 BD46     		mov	sp, r7
  61 0024 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0026 80BD     		pop	{r7, pc}
  64              	.L3:
  65              		.align	2
  66              	.L2:
  67 0028 00E100E0 		.word	-536813312
  68              		.cfi_endproc
  69              	.LFE25:
  71              		.section	.text.NVIC_DisableIRQ,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.code	16
  75              		.thumb_func
  76              		.fpu softvfp
  78              	NVIC_DisableIRQ:
  79              	.LFB26:
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
  80              		.loc 1 641 1
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84 0000 80B5     		push	{r7, lr}
  85              	.LCFI3:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 82B0     		sub	sp, sp, #8
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 16
  92 0004 00AF     		add	r7, sp, #0
  93              	.LCFI5:
  94              		.cfi_def_cfa_register 7
  95 0006 0200     		movs	r2, r0
  96 0008 FB1D     		adds	r3, r7, #7
  97 000a 1A70     		strb	r2, [r3]
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  98              		.loc 1 642 65
  99 000c FB1D     		adds	r3, r7, #7
 100 000e 1B78     		ldrb	r3, [r3]
 101 0010 1A00     		movs	r2, r3
 102 0012 1F23     		movs	r3, #31
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 14


 103 0014 1340     		ands	r3, r2
 104              		.loc 1 642 7
 105 0016 0549     		ldr	r1, .L5
 106              		.loc 1 642 20
 107 0018 0122     		movs	r2, #1
 108 001a 9A40     		lsls	r2, r2, r3
 109 001c 1300     		movs	r3, r2
 110              		.loc 1 642 18
 111 001e 8022     		movs	r2, #128
 112 0020 8B50     		str	r3, [r1, r2]
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 113              		.loc 1 643 1
 114 0022 C046     		nop
 115 0024 BD46     		mov	sp, r7
 116 0026 02B0     		add	sp, sp, #8
 117              		@ sp needed
 118 0028 80BD     		pop	{r7, pc}
 119              	.L6:
 120 002a C046     		.align	2
 121              	.L5:
 122 002c 00E100E0 		.word	-536813312
 123              		.cfi_endproc
 124              	.LFE26:
 126              		.section	.text.NVIC_GetPendingIRQ,"ax",%progbits
 127              		.align	1
 128              		.syntax unified
 129              		.code	16
 130              		.thumb_func
 131              		.fpu softvfp
 133              	NVIC_GetPendingIRQ:
 134              	.LFB27:
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 135              		.loc 1 654 1
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 8
 138              		@ frame_needed = 1, uses_anonymous_args = 0
 139 0000 80B5     		push	{r7, lr}
 140              	.LCFI6:
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 82B0     		sub	sp, sp, #8
 145              	.LCFI7:
 146              		.cfi_def_cfa_offset 16
 147 0004 00AF     		add	r7, sp, #0
 148              	.LCFI8:
 149              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 15


 150 0006 0200     		movs	r2, r0
 151 0008 FB1D     		adds	r3, r7, #7
 152 000a 1A70     		strb	r2, [r3]
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 153              		.loc 1 655 27
 154 000c 084A     		ldr	r2, .L9
 155              		.loc 1 655 33
 156 000e 8023     		movs	r3, #128
 157 0010 5B00     		lsls	r3, r3, #1
 158 0012 D258     		ldr	r2, [r2, r3]
 159              		.loc 1 655 75
 160 0014 FB1D     		adds	r3, r7, #7
 161 0016 1B78     		ldrb	r3, [r3]
 162 0018 1900     		movs	r1, r3
 163 001a 1F23     		movs	r3, #31
 164 001c 0B40     		ands	r3, r1
 165              		.loc 1 655 87
 166 001e DA40     		lsrs	r2, r2, r3
 167 0020 1300     		movs	r3, r2
 168              		.loc 1 655 10
 169 0022 0122     		movs	r2, #1
 170 0024 1340     		ands	r3, r2
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 171              		.loc 1 656 1
 172 0026 1800     		movs	r0, r3
 173 0028 BD46     		mov	sp, r7
 174 002a 02B0     		add	sp, sp, #8
 175              		@ sp needed
 176 002c 80BD     		pop	{r7, pc}
 177              	.L10:
 178 002e C046     		.align	2
 179              	.L9:
 180 0030 00E100E0 		.word	-536813312
 181              		.cfi_endproc
 182              	.LFE27:
 184              		.section	.text.NVIC_SetPendingIRQ,"ax",%progbits
 185              		.align	1
 186              		.syntax unified
 187              		.code	16
 188              		.thumb_func
 189              		.fpu softvfp
 191              	NVIC_SetPendingIRQ:
 192              	.LFB28:
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 193              		.loc 1 665 1
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 16


 198              	.LCFI9:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 82B0     		sub	sp, sp, #8
 203              	.LCFI10:
 204              		.cfi_def_cfa_offset 16
 205 0004 00AF     		add	r7, sp, #0
 206              	.LCFI11:
 207              		.cfi_def_cfa_register 7
 208 0006 0200     		movs	r2, r0
 209 0008 FB1D     		adds	r3, r7, #7
 210 000a 1A70     		strb	r2, [r3]
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 211              		.loc 1 666 65
 212 000c FB1D     		adds	r3, r7, #7
 213 000e 1B78     		ldrb	r3, [r3]
 214 0010 1A00     		movs	r2, r3
 215 0012 1F23     		movs	r3, #31
 216 0014 1340     		ands	r3, r2
 217              		.loc 1 666 7
 218 0016 0549     		ldr	r1, .L12
 219              		.loc 1 666 20
 220 0018 0122     		movs	r2, #1
 221 001a 9A40     		lsls	r2, r2, r3
 222              		.loc 1 666 18
 223 001c 8023     		movs	r3, #128
 224 001e 5B00     		lsls	r3, r3, #1
 225 0020 CA50     		str	r2, [r1, r3]
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 226              		.loc 1 667 1
 227 0022 C046     		nop
 228 0024 BD46     		mov	sp, r7
 229 0026 02B0     		add	sp, sp, #8
 230              		@ sp needed
 231 0028 80BD     		pop	{r7, pc}
 232              	.L13:
 233 002a C046     		.align	2
 234              	.L12:
 235 002c 00E100E0 		.word	-536813312
 236              		.cfi_endproc
 237              	.LFE28:
 239              		.section	.text.NVIC_ClearPendingIRQ,"ax",%progbits
 240              		.align	1
 241              		.syntax unified
 242              		.code	16
 243              		.thumb_func
 244              		.fpu softvfp
 246              	NVIC_ClearPendingIRQ:
 247              	.LFB29:
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 17


 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 248              		.loc 1 676 1
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 0000 80B5     		push	{r7, lr}
 253              	.LCFI12:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257 0002 82B0     		sub	sp, sp, #8
 258              	.LCFI13:
 259              		.cfi_def_cfa_offset 16
 260 0004 00AF     		add	r7, sp, #0
 261              	.LCFI14:
 262              		.cfi_def_cfa_register 7
 263 0006 0200     		movs	r2, r0
 264 0008 FB1D     		adds	r3, r7, #7
 265 000a 1A70     		strb	r2, [r3]
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 266              		.loc 1 677 65
 267 000c FB1D     		adds	r3, r7, #7
 268 000e 1B78     		ldrb	r3, [r3]
 269 0010 1A00     		movs	r2, r3
 270 0012 1F23     		movs	r3, #31
 271 0014 1340     		ands	r3, r2
 272              		.loc 1 677 7
 273 0016 0549     		ldr	r1, .L15
 274              		.loc 1 677 20
 275 0018 0122     		movs	r2, #1
 276 001a 9A40     		lsls	r2, r2, r3
 277              		.loc 1 677 18
 278 001c C023     		movs	r3, #192
 279 001e 5B00     		lsls	r3, r3, #1
 280 0020 CA50     		str	r2, [r1, r3]
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 281              		.loc 1 678 1
 282 0022 C046     		nop
 283 0024 BD46     		mov	sp, r7
 284 0026 02B0     		add	sp, sp, #8
 285              		@ sp needed
 286 0028 80BD     		pop	{r7, pc}
 287              	.L16:
 288 002a C046     		.align	2
 289              	.L15:
 290 002c 00E100E0 		.word	-536813312
 291              		.cfi_endproc
 292              	.LFE29:
 294              		.section	.text.NVIC_SetPriority,"ax",%progbits
 295              		.align	1
 296              		.syntax unified
 297              		.code	16
 298              		.thumb_func
 299              		.fpu softvfp
 301              	NVIC_SetPriority:
 302              	.LFB30:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 18


 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 303              		.loc 1 689 1
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 8
 306              		@ frame_needed = 1, uses_anonymous_args = 0
 307 0000 90B5     		push	{r4, r7, lr}
 308              	.LCFI15:
 309              		.cfi_def_cfa_offset 12
 310              		.cfi_offset 4, -12
 311              		.cfi_offset 7, -8
 312              		.cfi_offset 14, -4
 313 0002 83B0     		sub	sp, sp, #12
 314              	.LCFI16:
 315              		.cfi_def_cfa_offset 24
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI17:
 318              		.cfi_def_cfa_register 7
 319 0006 0200     		movs	r2, r0
 320 0008 3960     		str	r1, [r7]
 321 000a FB1D     		adds	r3, r7, #7
 322 000c 1A70     		strb	r2, [r3]
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 323              		.loc 1 690 6
 324 000e FB1D     		adds	r3, r7, #7
 325 0010 1B78     		ldrb	r3, [r3]
 326 0012 7F2B     		cmp	r3, #127
 327 0014 32D9     		bls	.L18
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 328              		.loc 1 692 47
 329 0016 2F4A     		ldr	r2, .L21
 330              		.loc 1 692 53
 331 0018 FB1D     		adds	r3, r7, #7
 332 001a 1B78     		ldrb	r3, [r3]
 333 001c 1900     		movs	r1, r3
 334 001e 0F23     		movs	r3, #15
 335 0020 0B40     		ands	r3, r1
 336 0022 083B     		subs	r3, r3, #8
 337 0024 9B08     		lsrs	r3, r3, #2
 338              		.loc 1 692 52
 339 0026 0633     		adds	r3, r3, #6
 340 0028 9B00     		lsls	r3, r3, #2
 341 002a D318     		adds	r3, r2, r3
 342 002c 0433     		adds	r3, r3, #4
 343 002e 1B68     		ldr	r3, [r3]
 344              		.loc 1 692 83
 345 0030 FA1D     		adds	r2, r7, #7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 19


 346 0032 1278     		ldrb	r2, [r2]
 347 0034 1100     		movs	r1, r2
 348 0036 0322     		movs	r2, #3
 349 0038 0A40     		ands	r2, r1
 350 003a D200     		lsls	r2, r2, #3
 351              		.loc 1 692 80
 352 003c FF21     		movs	r1, #255
 353 003e 9140     		lsls	r1, r1, r2
 354 0040 0A00     		movs	r2, r1
 355              		.loc 1 692 71
 356 0042 D243     		mvns	r2, r2
 357              		.loc 1 692 33
 358 0044 1A40     		ands	r2, r3
 359 0046 1100     		movs	r1, r2
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 360              		.loc 1 693 20
 361 0048 3B68     		ldr	r3, [r7]
 362 004a 9B01     		lsls	r3, r3, #6
 363              		.loc 1 693 48
 364 004c FF22     		movs	r2, #255
 365 004e 1A40     		ands	r2, r3
 366              		.loc 1 693 71
 367 0050 FB1D     		adds	r3, r7, #7
 368 0052 1B78     		ldrb	r3, [r3]
 369 0054 1800     		movs	r0, r3
 370 0056 0323     		movs	r3, #3
 371 0058 0340     		ands	r3, r0
 372 005a DB00     		lsls	r3, r3, #3
 373              		.loc 1 693 68
 374 005c 9A40     		lsls	r2, r2, r3
 692:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 375              		.loc 1 692 8
 376 005e 1D48     		ldr	r0, .L21
 692:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 377              		.loc 1 692 14
 378 0060 FB1D     		adds	r3, r7, #7
 379 0062 1B78     		ldrb	r3, [r3]
 380 0064 1C00     		movs	r4, r3
 381 0066 0F23     		movs	r3, #15
 382 0068 2340     		ands	r3, r4
 383 006a 083B     		subs	r3, r3, #8
 384 006c 9B08     		lsrs	r3, r3, #2
 692:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 385              		.loc 1 692 102
 386 006e 0A43     		orrs	r2, r1
 692:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 387              		.loc 1 692 30
 388 0070 0633     		adds	r3, r3, #6
 389 0072 9B00     		lsls	r3, r3, #2
 390 0074 C318     		adds	r3, r0, r3
 391 0076 0433     		adds	r3, r3, #4
 392 0078 1A60     		str	r2, [r3]
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 20


 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 393              		.loc 1 700 1
 394 007a 27E0     		b	.L20
 395              	.L18:
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 396              		.loc 1 697 48
 397 007c 164A     		ldr	r2, .L21+4
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 398              		.loc 1 697 53
 399 007e FB1D     		adds	r3, r7, #7
 400 0080 1B78     		ldrb	r3, [r3]
 401 0082 5BB2     		sxtb	r3, r3
 402 0084 9B08     		lsrs	r3, r3, #2
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 403              		.loc 1 697 52
 404 0086 C033     		adds	r3, r3, #192
 405 0088 9B00     		lsls	r3, r3, #2
 406 008a 9B58     		ldr	r3, [r3, r2]
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 407              		.loc 1 697 83
 408 008c FA1D     		adds	r2, r7, #7
 409 008e 1278     		ldrb	r2, [r2]
 410 0090 1100     		movs	r1, r2
 411 0092 0322     		movs	r2, #3
 412 0094 0A40     		ands	r2, r1
 413 0096 D200     		lsls	r2, r2, #3
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 414              		.loc 1 697 80
 415 0098 FF21     		movs	r1, #255
 416 009a 9140     		lsls	r1, r1, r2
 417 009c 0A00     		movs	r2, r1
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 418              		.loc 1 697 71
 419 009e D243     		mvns	r2, r2
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 420              		.loc 1 697 33
 421 00a0 1A40     		ands	r2, r3
 422 00a2 1100     		movs	r1, r2
 698:Drivers/CMSIS/Include/core_cm0.h ****   }
 423              		.loc 1 698 20
 424 00a4 3B68     		ldr	r3, [r7]
 425 00a6 9B01     		lsls	r3, r3, #6
 698:Drivers/CMSIS/Include/core_cm0.h ****   }
 426              		.loc 1 698 48
 427 00a8 FF22     		movs	r2, #255
 428 00aa 1A40     		ands	r2, r3
 698:Drivers/CMSIS/Include/core_cm0.h ****   }
 429              		.loc 1 698 71
 430 00ac FB1D     		adds	r3, r7, #7
 431 00ae 1B78     		ldrb	r3, [r3]
 432 00b0 1800     		movs	r0, r3
 433 00b2 0323     		movs	r3, #3
 434 00b4 0340     		ands	r3, r0
 435 00b6 DB00     		lsls	r3, r3, #3
 698:Drivers/CMSIS/Include/core_cm0.h ****   }
 436              		.loc 1 698 68
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 21


 437 00b8 9A40     		lsls	r2, r2, r3
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 438              		.loc 1 697 9
 439 00ba 0748     		ldr	r0, .L21+4
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 440              		.loc 1 697 14
 441 00bc FB1D     		adds	r3, r7, #7
 442 00be 1B78     		ldrb	r3, [r3]
 443 00c0 5BB2     		sxtb	r3, r3
 444 00c2 9B08     		lsrs	r3, r3, #2
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 445              		.loc 1 697 102
 446 00c4 0A43     		orrs	r2, r1
 697:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 447              		.loc 1 697 30
 448 00c6 C033     		adds	r3, r3, #192
 449 00c8 9B00     		lsls	r3, r3, #2
 450 00ca 1A50     		str	r2, [r3, r0]
 451              	.L20:
 452              		.loc 1 700 1
 453 00cc C046     		nop
 454 00ce BD46     		mov	sp, r7
 455 00d0 03B0     		add	sp, sp, #12
 456              		@ sp needed
 457 00d2 90BD     		pop	{r4, r7, pc}
 458              	.L22:
 459              		.align	2
 460              	.L21:
 461 00d4 00ED00E0 		.word	-536810240
 462 00d8 00E100E0 		.word	-536813312
 463              		.cfi_endproc
 464              	.LFE30:
 466              		.section	.text.NVIC_GetPriority,"ax",%progbits
 467              		.align	1
 468              		.syntax unified
 469              		.code	16
 470              		.thumb_func
 471              		.fpu softvfp
 473              	NVIC_GetPriority:
 474              	.LFB31:
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 475              		.loc 1 713 1
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 8
 478              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 22


 479 0000 80B5     		push	{r7, lr}
 480              	.LCFI18:
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 82B0     		sub	sp, sp, #8
 485              	.LCFI19:
 486              		.cfi_def_cfa_offset 16
 487 0004 00AF     		add	r7, sp, #0
 488              	.LCFI20:
 489              		.cfi_def_cfa_register 7
 490 0006 0200     		movs	r2, r0
 491 0008 FB1D     		adds	r3, r7, #7
 492 000a 1A70     		strb	r2, [r3]
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 493              		.loc 1 715 6
 494 000c FB1D     		adds	r3, r7, #7
 495 000e 1B78     		ldrb	r3, [r3]
 496 0010 7F2B     		cmp	r3, #127
 497 0012 18D9     		bls	.L24
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 498              		.loc 1 717 28
 499 0014 174A     		ldr	r2, .L26
 500              		.loc 1 717 34
 501 0016 FB1D     		adds	r3, r7, #7
 502 0018 1B78     		ldrb	r3, [r3]
 503 001a 1900     		movs	r1, r3
 504 001c 0F23     		movs	r3, #15
 505 001e 0B40     		ands	r3, r1
 506 0020 083B     		subs	r3, r3, #8
 507 0022 9B08     		lsrs	r3, r3, #2
 508              		.loc 1 717 33
 509 0024 0633     		adds	r3, r3, #6
 510 0026 9B00     		lsls	r3, r3, #2
 511 0028 D318     		adds	r3, r2, r3
 512 002a 0433     		adds	r3, r3, #4
 513 002c 1A68     		ldr	r2, [r3]
 514              		.loc 1 717 53
 515 002e FB1D     		adds	r3, r7, #7
 516 0030 1B78     		ldrb	r3, [r3]
 517 0032 1900     		movs	r1, r3
 518 0034 0323     		movs	r3, #3
 519 0036 0B40     		ands	r3, r1
 520 0038 DB00     		lsls	r3, r3, #3
 521              		.loc 1 717 50
 522 003a DA40     		lsrs	r2, r2, r3
 523 003c 1300     		movs	r3, r2
 524              		.loc 1 717 12
 525 003e 9B09     		lsrs	r3, r3, #6
 526 0040 0322     		movs	r2, #3
 527 0042 1340     		ands	r3, r2
 528 0044 12E0     		b	.L25
 529              	.L24:
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 23


 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 530              		.loc 1 721 29
 531 0046 0C4A     		ldr	r2, .L26+4
 532              		.loc 1 721 35
 533 0048 FB1D     		adds	r3, r7, #7
 534 004a 1B78     		ldrb	r3, [r3]
 535 004c 5BB2     		sxtb	r3, r3
 536 004e 9B08     		lsrs	r3, r3, #2
 537              		.loc 1 721 33
 538 0050 C033     		adds	r3, r3, #192
 539 0052 9B00     		lsls	r3, r3, #2
 540 0054 9A58     		ldr	r2, [r3, r2]
 541              		.loc 1 721 53
 542 0056 FB1D     		adds	r3, r7, #7
 543 0058 1B78     		ldrb	r3, [r3]
 544 005a 1900     		movs	r1, r3
 545 005c 0323     		movs	r3, #3
 546 005e 0B40     		ands	r3, r1
 547 0060 DB00     		lsls	r3, r3, #3
 548              		.loc 1 721 50
 549 0062 DA40     		lsrs	r2, r2, r3
 550 0064 1300     		movs	r3, r2
 551              		.loc 1 721 12
 552 0066 9B09     		lsrs	r3, r3, #6
 553 0068 0322     		movs	r2, #3
 554 006a 1340     		ands	r3, r2
 555              	.L25:
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 556              		.loc 1 723 1
 557 006c 1800     		movs	r0, r3
 558 006e BD46     		mov	sp, r7
 559 0070 02B0     		add	sp, sp, #8
 560              		@ sp needed
 561 0072 80BD     		pop	{r7, pc}
 562              	.L27:
 563              		.align	2
 564              	.L26:
 565 0074 00ED00E0 		.word	-536810240
 566 0078 00E100E0 		.word	-536813312
 567              		.cfi_endproc
 568              	.LFE31:
 570              		.section	.text.NVIC_SystemReset,"ax",%progbits
 571              		.align	1
 572              		.syntax unified
 573              		.code	16
 574              		.thumb_func
 575              		.fpu softvfp
 577              	NVIC_SystemReset:
 578              	.LFB32:
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 24


 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 579              		.loc 1 731 1
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583 0000 80B5     		push	{r7, lr}
 584              	.LCFI21:
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 00AF     		add	r7, sp, #0
 589              	.LCFI22:
 590              		.cfi_def_cfa_register 7
 591              	.LBB8:
 592              	.LBB9:
 593              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 25


  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 26


  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 27


 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 28


 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 29


 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 30


 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 31


 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 594              		.loc 2 429 3
 595              		.syntax divided
 596              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 597 0004 BFF34F8F 		dsb 0xF
 598              	@ 0 "" 2
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 599              		.loc 2 430 1
 600              		.thumb
 601              		.syntax unified
 602 0008 C046     		nop
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 32


 603              	.LBE9:
 604              	.LBE8:
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 605              		.loc 1 734 6
 606 000a 044B     		ldr	r3, .L30
 607              		.loc 1 734 15
 608 000c 044A     		ldr	r2, .L30+4
 609 000e DA60     		str	r2, [r3, #12]
 610              	.LBB10:
 611              	.LBB11:
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 612              		.loc 2 429 3
 613              		.syntax divided
 614              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 615 0010 BFF34F8F 		dsb 0xF
 616              	@ 0 "" 2
 617              		.loc 2 430 1
 618              		.thumb
 619              		.syntax unified
 620 0014 C046     		nop
 621              	.L29:
 622              	.LBE11:
 623              	.LBE10:
 624              	.LBB12:
 625              	.LBB13:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 626              		.loc 2 375 3 discriminator 1
 627              		.syntax divided
 628              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 629 0016 C046     		nop
 630              	@ 0 "" 2
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 631              		.loc 2 376 1 discriminator 1
 632              		.thumb
 633              		.syntax unified
 634 0018 C046     		nop
 635              	.LBE13:
 636              	.LBE12:
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 637              		.loc 1 740 5 discriminator 1
 638 001a FCE7     		b	.L29
 639              	.L31:
 640              		.align	2
 641              	.L30:
 642 001c 00ED00E0 		.word	-536810240
 643 0020 0400FA05 		.word	100270084
 644              		.cfi_endproc
 645              	.LFE32:
 647              		.section	.text.SysTick_Config,"ax",%progbits
 648              		.align	1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 33


 649              		.syntax unified
 650              		.code	16
 651              		.thumb_func
 652              		.fpu softvfp
 654              	SysTick_Config:
 655              	.LFB33:
 741:Drivers/CMSIS/Include/core_cm0.h ****   }
 742:Drivers/CMSIS/Include/core_cm0.h **** }
 743:Drivers/CMSIS/Include/core_cm0.h **** 
 744:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 745:Drivers/CMSIS/Include/core_cm0.h **** 
 746:Drivers/CMSIS/Include/core_cm0.h **** 
 747:Drivers/CMSIS/Include/core_cm0.h **** 
 748:Drivers/CMSIS/Include/core_cm0.h **** /* ##################################    SysTick function  ########################################
 749:Drivers/CMSIS/Include/core_cm0.h **** /**
 750:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 751:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
 752:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that configure the System.
 753:Drivers/CMSIS/Include/core_cm0.h ****   @{
 754:Drivers/CMSIS/Include/core_cm0.h ****  */
 755:Drivers/CMSIS/Include/core_cm0.h **** 
 756:Drivers/CMSIS/Include/core_cm0.h **** #if (__Vendor_SysTickConfig == 0U)
 757:Drivers/CMSIS/Include/core_cm0.h **** 
 758:Drivers/CMSIS/Include/core_cm0.h **** /**
 759:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Tick Configuration
 760:Drivers/CMSIS/Include/core_cm0.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 761:Drivers/CMSIS/Include/core_cm0.h ****            Counter is in free running mode to generate periodic interrupts.
 762:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  ticks  Number of ticks between two interrupts.
 763:Drivers/CMSIS/Include/core_cm0.h ****   \return          0  Function succeeded.
 764:Drivers/CMSIS/Include/core_cm0.h ****   \return          1  Function failed.
 765:Drivers/CMSIS/Include/core_cm0.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 766:Drivers/CMSIS/Include/core_cm0.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
 767:Drivers/CMSIS/Include/core_cm0.h ****            must contain a vendor-specific implementation of this function.
 768:Drivers/CMSIS/Include/core_cm0.h ****  */
 769:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 770:Drivers/CMSIS/Include/core_cm0.h **** {
 656              		.loc 1 770 1
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 8
 659              		@ frame_needed = 1, uses_anonymous_args = 0
 660 0000 80B5     		push	{r7, lr}
 661              	.LCFI23:
 662              		.cfi_def_cfa_offset 8
 663              		.cfi_offset 7, -8
 664              		.cfi_offset 14, -4
 665 0002 82B0     		sub	sp, sp, #8
 666              	.LCFI24:
 667              		.cfi_def_cfa_offset 16
 668 0004 00AF     		add	r7, sp, #0
 669              	.LCFI25:
 670              		.cfi_def_cfa_register 7
 671 0006 7860     		str	r0, [r7, #4]
 771:Drivers/CMSIS/Include/core_cm0.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 672              		.loc 1 771 14
 673 0008 7B68     		ldr	r3, [r7, #4]
 674 000a 5A1E     		subs	r2, r3, #1
 675              		.loc 1 771 6
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 34


 676 000c 8023     		movs	r3, #128
 677 000e 5B04     		lsls	r3, r3, #17
 678 0010 9A42     		cmp	r2, r3
 679 0012 01D3     		bcc	.L33
 772:Drivers/CMSIS/Include/core_cm0.h ****   {
 773:Drivers/CMSIS/Include/core_cm0.h ****     return (1UL);                                                   /* Reload value impossible */
 680              		.loc 1 773 12
 681 0014 0123     		movs	r3, #1
 682 0016 10E0     		b	.L34
 683              	.L33:
 774:Drivers/CMSIS/Include/core_cm0.h ****   }
 775:Drivers/CMSIS/Include/core_cm0.h **** 
 776:Drivers/CMSIS/Include/core_cm0.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 684              		.loc 1 776 10
 685 0018 0A4B     		ldr	r3, .L35
 686              		.loc 1 776 20
 687 001a 7A68     		ldr	r2, [r7, #4]
 688 001c 013A     		subs	r2, r2, #1
 689              		.loc 1 776 18
 690 001e 5A60     		str	r2, [r3, #4]
 777:Drivers/CMSIS/Include/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 691              		.loc 1 777 3
 692 0020 0123     		movs	r3, #1
 693 0022 5B42     		rsbs	r3, r3, #0
 694 0024 0321     		movs	r1, #3
 695 0026 1800     		movs	r0, r3
 696 0028 FFF7FEFF 		bl	NVIC_SetPriority
 778:Drivers/CMSIS/Include/core_cm0.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 697              		.loc 1 778 10
 698 002c 054B     		ldr	r3, .L35
 699              		.loc 1 778 18
 700 002e 0022     		movs	r2, #0
 701 0030 9A60     		str	r2, [r3, #8]
 779:Drivers/CMSIS/Include/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 702              		.loc 1 779 10
 703 0032 044B     		ldr	r3, .L35
 704              		.loc 1 779 18
 705 0034 0722     		movs	r2, #7
 706 0036 1A60     		str	r2, [r3]
 780:Drivers/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   |
 781:Drivers/CMSIS/Include/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
 782:Drivers/CMSIS/Include/core_cm0.h ****   return (0UL);                                                     /* Function successful */
 707              		.loc 1 782 10
 708 0038 0023     		movs	r3, #0
 709              	.L34:
 783:Drivers/CMSIS/Include/core_cm0.h **** }
 710              		.loc 1 783 1
 711 003a 1800     		movs	r0, r3
 712 003c BD46     		mov	sp, r7
 713 003e 02B0     		add	sp, sp, #8
 714              		@ sp needed
 715 0040 80BD     		pop	{r7, pc}
 716              	.L36:
 717 0042 C046     		.align	2
 718              	.L35:
 719 0044 10E000E0 		.word	-536813552
 720              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 35


 721              	.LFE33:
 723              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
 724              		.align	1
 725              		.global	HAL_NVIC_SetPriority
 726              		.syntax unified
 727              		.code	16
 728              		.thumb_func
 729              		.fpu softvfp
 731              	HAL_NVIC_SetPriority:
 732              	.LFB37:
 733              		.file 3 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @file    stm32f0xx_hal_cortex.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *  @verbatim
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]  
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     ===========================================================
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     The Cortex-M0 exceptions are managed by CMSIS functions.
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels. 
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****              The priority can be 0..3. 
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         -@- Priority Order:
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             (#@) Lowest priority.
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).  
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority()
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ()
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       -@-  Negative value of IRQn_Type are not allowed.
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     ========================================================
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     Setup SysTick Timer for time base. 
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****            
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        is a CMSIS function that:
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 36


  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The HAL_SYSTICK_CLKSourceConfig() macro is defined
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        inside the stm32f0xx_hal_cortex.h file.
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   @endverbatim
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @attention
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * are permitted provided that the following conditions are met:
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer.
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      this list of conditions and the following disclaimer in the documentation
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      and/or other materials provided with the distribution.
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      may be used to endorse or promote products derived from this software
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *      without specific prior written permission.
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ******************************************************************************  
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** #include "stm32f0xx_hal.h"
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @addtogroup STM32F0xx_HAL_Driver
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 37


 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief CORTEX CORTEX HAL module driver
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private typedef -----------------------------------------------------------*/
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private define ------------------------------------------------------------*/
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private macro -------------------------------------------------------------*/
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /* Exported functions ---------------------------------------------------------*/
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @verbatim
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       Systick functionalities 
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @endverbatim
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32f0xx.h file)
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  PreemptPriority The preemption priority for the IRQn channel.
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0 based products.   
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** { 
 734              		.loc 3 153 1
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 16
 737              		@ frame_needed = 1, uses_anonymous_args = 0
 738 0000 80B5     		push	{r7, lr}
 739              	.LCFI26:
 740              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 38


 741              		.cfi_offset 7, -8
 742              		.cfi_offset 14, -4
 743 0002 84B0     		sub	sp, sp, #16
 744              	.LCFI27:
 745              		.cfi_def_cfa_offset 24
 746 0004 00AF     		add	r7, sp, #0
 747              	.LCFI28:
 748              		.cfi_def_cfa_register 7
 749 0006 B960     		str	r1, [r7, #8]
 750 0008 7A60     		str	r2, [r7, #4]
 751 000a 0F21     		movs	r1, #15
 752 000c 7B18     		adds	r3, r7, r1
 753 000e 021C     		adds	r2, r0, #0
 754 0010 1A70     		strb	r2, [r3]
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
 755              		.loc 3 156 3
 756 0012 BA68     		ldr	r2, [r7, #8]
 757 0014 7B18     		adds	r3, r7, r1
 758 0016 1B78     		ldrb	r3, [r3]
 759 0018 5BB2     		sxtb	r3, r3
 760 001a 1100     		movs	r1, r2
 761 001c 1800     		movs	r0, r3
 762 001e FFF7FEFF 		bl	NVIC_SetPriority
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 763              		.loc 3 157 1
 764 0022 C046     		nop
 765 0024 BD46     		mov	sp, r7
 766 0026 04B0     		add	sp, sp, #16
 767              		@ sp needed
 768 0028 80BD     		pop	{r7, pc}
 769              		.cfi_endproc
 770              	.LFE37:
 772              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 773              		.align	1
 774              		.global	HAL_NVIC_EnableIRQ
 775              		.syntax unified
 776              		.code	16
 777              		.thumb_func
 778              		.fpu softvfp
 780              	HAL_NVIC_EnableIRQ:
 781              	.LFB38:
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         function should be called before. 
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 782              		.loc 3 169 1
 783              		.cfi_startproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 39


 784              		@ args = 0, pretend = 0, frame = 8
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786 0000 80B5     		push	{r7, lr}
 787              	.LCFI29:
 788              		.cfi_def_cfa_offset 8
 789              		.cfi_offset 7, -8
 790              		.cfi_offset 14, -4
 791 0002 82B0     		sub	sp, sp, #8
 792              	.LCFI30:
 793              		.cfi_def_cfa_offset 16
 794 0004 00AF     		add	r7, sp, #0
 795              	.LCFI31:
 796              		.cfi_def_cfa_register 7
 797 0006 0200     		movs	r2, r0
 798 0008 FB1D     		adds	r3, r7, #7
 799 000a 1A70     		strb	r2, [r3]
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Enable interrupt */
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 800              		.loc 3 174 3
 801 000c FB1D     		adds	r3, r7, #7
 802 000e 1B78     		ldrb	r3, [r3]
 803 0010 5BB2     		sxtb	r3, r3
 804 0012 1800     		movs	r0, r3
 805 0014 FFF7FEFF 		bl	NVIC_EnableIRQ
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 806              		.loc 3 175 1
 807 0018 C046     		nop
 808 001a BD46     		mov	sp, r7
 809 001c 02B0     		add	sp, sp, #8
 810              		@ sp needed
 811 001e 80BD     		pop	{r7, pc}
 812              		.cfi_endproc
 813              	.LFE38:
 815              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 816              		.align	1
 817              		.global	HAL_NVIC_DisableIRQ
 818              		.syntax unified
 819              		.code	16
 820              		.thumb_func
 821              		.fpu softvfp
 823              	HAL_NVIC_DisableIRQ:
 824              	.LFB39:
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 825              		.loc 3 185 1
 826              		.cfi_startproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 40


 827              		@ args = 0, pretend = 0, frame = 8
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829 0000 80B5     		push	{r7, lr}
 830              	.LCFI32:
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 82B0     		sub	sp, sp, #8
 835              	.LCFI33:
 836              		.cfi_def_cfa_offset 16
 837 0004 00AF     		add	r7, sp, #0
 838              	.LCFI34:
 839              		.cfi_def_cfa_register 7
 840 0006 0200     		movs	r2, r0
 841 0008 FB1D     		adds	r3, r7, #7
 842 000a 1A70     		strb	r2, [r3]
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Disable interrupt */
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 843              		.loc 3 190 3
 844 000c FB1D     		adds	r3, r7, #7
 845 000e 1B78     		ldrb	r3, [r3]
 846 0010 5BB2     		sxtb	r3, r3
 847 0012 1800     		movs	r0, r3
 848 0014 FFF7FEFF 		bl	NVIC_DisableIRQ
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 849              		.loc 3 191 1
 850 0018 C046     		nop
 851 001a BD46     		mov	sp, r7
 852 001c 02B0     		add	sp, sp, #8
 853              		@ sp needed
 854 001e 80BD     		pop	{r7, pc}
 855              		.cfi_endproc
 856              	.LFE39:
 858              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 859              		.align	1
 860              		.global	HAL_NVIC_SystemReset
 861              		.syntax unified
 862              		.code	16
 863              		.thumb_func
 864              		.fpu softvfp
 866              	HAL_NVIC_SystemReset:
 867              	.LFB40:
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 868              		.loc 3 198 1
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 41


 873              	.LCFI35:
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 7, -8
 876              		.cfi_offset 14, -4
 877 0002 00AF     		add	r7, sp, #0
 878              	.LCFI36:
 879              		.cfi_def_cfa_register 7
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* System Reset */
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SystemReset();
 880              		.loc 3 200 3
 881 0004 FFF7FEFF 		bl	NVIC_SystemReset
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 882              		.loc 3 201 1
 883 0008 C046     		nop
 884 000a BD46     		mov	sp, r7
 885              		@ sp needed
 886 000c 80BD     		pop	{r7, pc}
 887              		.cfi_endproc
 888              	.LFE40:
 890              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 891              		.align	1
 892              		.global	HAL_SYSTICK_Config
 893              		.syntax unified
 894              		.code	16
 895              		.thumb_func
 896              		.fpu softvfp
 898              	HAL_SYSTICK_Config:
 899              	.LFB41:
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *                  - 1  Function failed.
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 900              		.loc 3 211 1
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 8
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 80B5     		push	{r7, lr}
 905              	.LCFI37:
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 82B0     		sub	sp, sp, #8
 910              	.LCFI38:
 911              		.cfi_def_cfa_offset 16
 912 0004 00AF     		add	r7, sp, #0
 913              	.LCFI39:
 914              		.cfi_def_cfa_register 7
 915 0006 7860     		str	r0, [r7, #4]
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 916              		.loc 3 212 11
 917 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 42


 918 000a 1800     		movs	r0, r3
 919 000c FFF7FEFF 		bl	SysTick_Config
 920 0010 0300     		movs	r3, r0
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 921              		.loc 3 213 1
 922 0012 1800     		movs	r0, r3
 923 0014 BD46     		mov	sp, r7
 924 0016 02B0     		add	sp, sp, #8
 925              		@ sp needed
 926 0018 80BD     		pop	{r7, pc}
 927              		.cfi_endproc
 928              	.LFE41:
 930              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 931              		.align	1
 932              		.global	HAL_NVIC_GetPriority
 933              		.syntax unified
 934              		.code	16
 935              		.thumb_func
 936              		.fpu softvfp
 938              	HAL_NVIC_GetPriority:
 939              	.LFB42:
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @}
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *  @brief   Cortex control functions
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****  *
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @verbatim
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   ==============================================================================
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     [..]
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities.
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** @endverbatim
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @{
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 940              		.loc 3 243 1
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 8
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944 0000 80B5     		push	{r7, lr}
 945              	.LCFI40:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 43


 946              		.cfi_def_cfa_offset 8
 947              		.cfi_offset 7, -8
 948              		.cfi_offset 14, -4
 949 0002 82B0     		sub	sp, sp, #8
 950              	.LCFI41:
 951              		.cfi_def_cfa_offset 16
 952 0004 00AF     		add	r7, sp, #0
 953              	.LCFI42:
 954              		.cfi_def_cfa_register 7
 955 0006 0200     		movs	r2, r0
 956 0008 FB1D     		adds	r3, r7, #7
 957 000a 1A70     		strb	r2, [r3]
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 958              		.loc 3 245 10
 959 000c FB1D     		adds	r3, r7, #7
 960 000e 1B78     		ldrb	r3, [r3]
 961 0010 5BB2     		sxtb	r3, r3
 962 0012 1800     		movs	r0, r3
 963 0014 FFF7FEFF 		bl	NVIC_GetPriority
 964 0018 0300     		movs	r3, r0
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 965              		.loc 3 246 1
 966 001a 1800     		movs	r0, r3
 967 001c BD46     		mov	sp, r7
 968 001e 02B0     		add	sp, sp, #8
 969              		@ sp needed
 970 0020 80BD     		pop	{r7, pc}
 971              		.cfi_endproc
 972              	.LFE42:
 974              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 975              		.align	1
 976              		.global	HAL_NVIC_SetPendingIRQ
 977              		.syntax unified
 978              		.code	16
 979              		.thumb_func
 980              		.fpu softvfp
 982              	HAL_NVIC_SetPendingIRQ:
 983              	.LFB43:
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 984              		.loc 3 256 1
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 8
 987              		@ frame_needed = 1, uses_anonymous_args = 0
 988 0000 80B5     		push	{r7, lr}
 989              	.LCFI43:
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 7, -8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 44


 992              		.cfi_offset 14, -4
 993 0002 82B0     		sub	sp, sp, #8
 994              	.LCFI44:
 995              		.cfi_def_cfa_offset 16
 996 0004 00AF     		add	r7, sp, #0
 997              	.LCFI45:
 998              		.cfi_def_cfa_register 7
 999 0006 0200     		movs	r2, r0
 1000 0008 FB1D     		adds	r3, r7, #7
 1001 000a 1A70     		strb	r2, [r3]
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Set interrupt pending */
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 1002              		.loc 3 261 3
 1003 000c FB1D     		adds	r3, r7, #7
 1004 000e 1B78     		ldrb	r3, [r3]
 1005 0010 5BB2     		sxtb	r3, r3
 1006 0012 1800     		movs	r0, r3
 1007 0014 FFF7FEFF 		bl	NVIC_SetPendingIRQ
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1008              		.loc 3 262 1
 1009 0018 C046     		nop
 1010 001a BD46     		mov	sp, r7
 1011 001c 02B0     		add	sp, sp, #8
 1012              		@ sp needed
 1013 001e 80BD     		pop	{r7, pc}
 1014              		.cfi_endproc
 1015              	.LFE43:
 1017              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 1018              		.align	1
 1019              		.global	HAL_NVIC_GetPendingIRQ
 1020              		.syntax unified
 1021              		.code	16
 1022              		.thumb_func
 1023              		.fpu softvfp
 1025              	HAL_NVIC_GetPendingIRQ:
 1026              	.LFB44:
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Gets Pending Interrupt (reads the pending register in the NVIC
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1027              		.loc 3 274 1
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 8
 1030              		@ frame_needed = 1, uses_anonymous_args = 0
 1031 0000 80B5     		push	{r7, lr}
 1032              	.LCFI46:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 45


 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 0002 82B0     		sub	sp, sp, #8
 1037              	.LCFI47:
 1038              		.cfi_def_cfa_offset 16
 1039 0004 00AF     		add	r7, sp, #0
 1040              	.LCFI48:
 1041              		.cfi_def_cfa_register 7
 1042 0006 0200     		movs	r2, r0
 1043 0008 FB1D     		adds	r3, r7, #7
 1044 000a 1A70     		strb	r2, [r3]
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 1045              		.loc 3 279 10
 1046 000c FB1D     		adds	r3, r7, #7
 1047 000e 1B78     		ldrb	r3, [r3]
 1048 0010 5BB2     		sxtb	r3, r3
 1049 0012 1800     		movs	r0, r3
 1050 0014 FFF7FEFF 		bl	NVIC_GetPendingIRQ
 1051 0018 0300     		movs	r3, r0
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1052              		.loc 3 280 1
 1053 001a 1800     		movs	r0, r3
 1054 001c BD46     		mov	sp, r7
 1055 001e 02B0     		add	sp, sp, #8
 1056              		@ sp needed
 1057 0020 80BD     		pop	{r7, pc}
 1058              		.cfi_endproc
 1059              	.LFE44:
 1061              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 1062              		.align	1
 1063              		.global	HAL_NVIC_ClearPendingIRQ
 1064              		.syntax unified
 1065              		.code	16
 1066              		.thumb_func
 1067              		.fpu softvfp
 1069              	HAL_NVIC_ClearPendingIRQ:
 1070              	.LFB45:
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Clears the pending bit of an external interrupt.
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1071              		.loc 3 290 1
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 8
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 46


 1076              	.LCFI49:
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 82B0     		sub	sp, sp, #8
 1081              	.LCFI50:
 1082              		.cfi_def_cfa_offset 16
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI51:
 1085              		.cfi_def_cfa_register 7
 1086 0006 0200     		movs	r2, r0
 1087 0008 FB1D     		adds	r3, r7, #7
 1088 000a 1A70     		strb	r2, [r3]
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Clear pending interrupt */
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 1089              		.loc 3 295 3
 1090 000c FB1D     		adds	r3, r7, #7
 1091 000e 1B78     		ldrb	r3, [r3]
 1092 0010 5BB2     		sxtb	r3, r3
 1093 0012 1800     		movs	r0, r3
 1094 0014 FFF7FEFF 		bl	NVIC_ClearPendingIRQ
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1095              		.loc 3 296 1
 1096 0018 C046     		nop
 1097 001a BD46     		mov	sp, r7
 1098 001c 02B0     		add	sp, sp, #8
 1099              		@ sp needed
 1100 001e 80BD     		pop	{r7, pc}
 1101              		.cfi_endproc
 1102              	.LFE45:
 1104              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 1105              		.align	1
 1106              		.global	HAL_SYSTICK_CLKSourceConfig
 1107              		.syntax unified
 1108              		.code	16
 1109              		.thumb_func
 1110              		.fpu softvfp
 1112              	HAL_SYSTICK_CLKSourceConfig:
 1113              	.LFB46:
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1114              		.loc 3 307 1
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 8
 1117              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 47


 1118 0000 80B5     		push	{r7, lr}
 1119              	.LCFI52:
 1120              		.cfi_def_cfa_offset 8
 1121              		.cfi_offset 7, -8
 1122              		.cfi_offset 14, -4
 1123 0002 82B0     		sub	sp, sp, #8
 1124              	.LCFI53:
 1125              		.cfi_def_cfa_offset 16
 1126 0004 00AF     		add	r7, sp, #0
 1127              	.LCFI54:
 1128              		.cfi_def_cfa_register 7
 1129 0006 7860     		str	r0, [r7, #4]
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* Check the parameters */
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 1130              		.loc 3 310 6
 1131 0008 7B68     		ldr	r3, [r7, #4]
 1132 000a 042B     		cmp	r3, #4
 1133 000c 06D1     		bne	.L50
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   {
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 1134              		.loc 3 312 19
 1135 000e 084B     		ldr	r3, .L53
 1136 0010 1A68     		ldr	r2, [r3]
 1137 0012 074B     		ldr	r3, .L53
 1138 0014 0421     		movs	r1, #4
 1139 0016 0A43     		orrs	r2, r1
 1140 0018 1A60     		str	r2, [r3]
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   else
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   {
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1141              		.loc 3 318 1
 1142 001a 05E0     		b	.L52
 1143              	.L50:
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   }
 1144              		.loc 3 316 19
 1145 001c 044B     		ldr	r3, .L53
 1146 001e 1A68     		ldr	r2, [r3]
 1147 0020 034B     		ldr	r3, .L53
 1148 0022 0421     		movs	r1, #4
 1149 0024 8A43     		bics	r2, r1
 1150 0026 1A60     		str	r2, [r3]
 1151              	.L52:
 1152              		.loc 3 318 1
 1153 0028 C046     		nop
 1154 002a BD46     		mov	sp, r7
 1155 002c 02B0     		add	sp, sp, #8
 1156              		@ sp needed
 1157 002e 80BD     		pop	{r7, pc}
 1158              	.L54:
 1159              		.align	2
 1160              	.L53:
 1161 0030 10E000E0 		.word	-536813552
 1162              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 48


 1163              	.LFE46:
 1165              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 1166              		.align	1
 1167              		.global	HAL_SYSTICK_IRQHandler
 1168              		.syntax unified
 1169              		.code	16
 1170              		.thumb_func
 1171              		.fpu softvfp
 1173              	HAL_SYSTICK_IRQHandler:
 1174              	.LFB47:
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1175              		.loc 3 325 1
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 1, uses_anonymous_args = 0
 1179 0000 80B5     		push	{r7, lr}
 1180              	.LCFI55:
 1181              		.cfi_def_cfa_offset 8
 1182              		.cfi_offset 7, -8
 1183              		.cfi_offset 14, -4
 1184 0002 00AF     		add	r7, sp, #0
 1185              	.LCFI56:
 1186              		.cfi_def_cfa_register 7
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 1187              		.loc 3 326 3
 1188 0004 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1189              		.loc 3 327 1
 1190 0008 C046     		nop
 1191 000a BD46     		mov	sp, r7
 1192              		@ sp needed
 1193 000c 80BD     		pop	{r7, pc}
 1194              		.cfi_endproc
 1195              	.LFE47:
 1197              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 1198              		.align	1
 1199              		.weak	HAL_SYSTICK_Callback
 1200              		.syntax unified
 1201              		.code	16
 1202              		.thumb_func
 1203              		.fpu softvfp
 1205              	HAL_SYSTICK_Callback:
 1206              	.LFB48:
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** 
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** /**
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   * @retval None
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   */
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** {
 1207              		.loc 3 334 1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 49


 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 1, uses_anonymous_args = 0
 1211 0000 80B5     		push	{r7, lr}
 1212              	.LCFI57:
 1213              		.cfi_def_cfa_offset 8
 1214              		.cfi_offset 7, -8
 1215              		.cfi_offset 14, -4
 1216 0002 00AF     		add	r7, sp, #0
 1217              	.LCFI58:
 1218              		.cfi_def_cfa_register 7
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c ****    */
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_cortex.c **** }
 1219              		.loc 3 338 1
 1220 0004 C046     		nop
 1221 0006 BD46     		mov	sp, r7
 1222              		@ sp needed
 1223 0008 80BD     		pop	{r7, pc}
 1224              		.cfi_endproc
 1225              	.LFE48:
 1227              		.text
 1228              	.Letext0:
 1229              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f091xc.h"
 1230              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1231              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1232              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1233              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1234              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1235              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\lib\\gcc\\arm-none-eab
 1236              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_hal_cortex.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:16     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:67     .text.NVIC_EnableIRQ:00000028 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:72     .text.NVIC_DisableIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:78     .text.NVIC_DisableIRQ:00000000 NVIC_DisableIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:122    .text.NVIC_DisableIRQ:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:127    .text.NVIC_GetPendingIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:133    .text.NVIC_GetPendingIRQ:00000000 NVIC_GetPendingIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:180    .text.NVIC_GetPendingIRQ:00000030 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:185    .text.NVIC_SetPendingIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:191    .text.NVIC_SetPendingIRQ:00000000 NVIC_SetPendingIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:235    .text.NVIC_SetPendingIRQ:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:240    .text.NVIC_ClearPendingIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:246    .text.NVIC_ClearPendingIRQ:00000000 NVIC_ClearPendingIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:290    .text.NVIC_ClearPendingIRQ:0000002c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:295    .text.NVIC_SetPriority:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:301    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:461    .text.NVIC_SetPriority:000000d4 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:467    .text.NVIC_GetPriority:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:473    .text.NVIC_GetPriority:00000000 NVIC_GetPriority
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:565    .text.NVIC_GetPriority:00000074 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:571    .text.NVIC_SystemReset:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:577    .text.NVIC_SystemReset:00000000 NVIC_SystemReset
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:642    .text.NVIC_SystemReset:0000001c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:648    .text.SysTick_Config:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:654    .text.SysTick_Config:00000000 SysTick_Config
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:719    .text.SysTick_Config:00000044 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:724    .text.HAL_NVIC_SetPriority:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:731    .text.HAL_NVIC_SetPriority:00000000 HAL_NVIC_SetPriority
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:773    .text.HAL_NVIC_EnableIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:780    .text.HAL_NVIC_EnableIRQ:00000000 HAL_NVIC_EnableIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:816    .text.HAL_NVIC_DisableIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:823    .text.HAL_NVIC_DisableIRQ:00000000 HAL_NVIC_DisableIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:859    .text.HAL_NVIC_SystemReset:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:866    .text.HAL_NVIC_SystemReset:00000000 HAL_NVIC_SystemReset
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:891    .text.HAL_SYSTICK_Config:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:898    .text.HAL_SYSTICK_Config:00000000 HAL_SYSTICK_Config
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:931    .text.HAL_NVIC_GetPriority:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:938    .text.HAL_NVIC_GetPriority:00000000 HAL_NVIC_GetPriority
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:975    .text.HAL_NVIC_SetPendingIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:982    .text.HAL_NVIC_SetPendingIRQ:00000000 HAL_NVIC_SetPendingIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1018   .text.HAL_NVIC_GetPendingIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1025   .text.HAL_NVIC_GetPendingIRQ:00000000 HAL_NVIC_GetPendingIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1062   .text.HAL_NVIC_ClearPendingIRQ:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1069   .text.HAL_NVIC_ClearPendingIRQ:00000000 HAL_NVIC_ClearPendingIRQ
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1105   .text.HAL_SYSTICK_CLKSourceConfig:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1112   .text.HAL_SYSTICK_CLKSourceConfig:00000000 HAL_SYSTICK_CLKSourceConfig
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1161   .text.HAL_SYSTICK_CLKSourceConfig:00000030 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1166   .text.HAL_SYSTICK_IRQHandler:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1173   .text.HAL_SYSTICK_IRQHandler:00000000 HAL_SYSTICK_IRQHandler
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1205   .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
C:\Users\ADMINI~1\AppData\Local\Temp\ccRwsmkn.s:1198   .text.HAL_SYSTICK_Callback:00000000 $t

NO UNDEFINED SYMBOLS
